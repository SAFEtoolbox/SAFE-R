search()
library(synlik)
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
updateR()
install.packages("rmarkdown")
install.packages("Rtools")
install.packages("rtools")
install.packages(Rtools)
install.packages("Rtools")
install.packages("rtools")
install.packages("Rtools")
install.packages("C:/Users/vn1197/OneDrive - University of Bristol/proj_SAFEVAL/safer_1.1/calibrater_0.51.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/vn1197/OneDrive - University of Bristol/proj_SAFEVAL/safer_1.1/SAFER_1.1.tar.gz", repos = NULL, type = "source")
install.packages("caTools")
> install.packages("C:/Users/vn1197/OneDrive - University of Bristol/proj_SAFEVAL/safer_1.1/SAFER_1.1.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/vn1197/OneDrive - University of Bristol/proj_SAFEVAL/safer_1.1/SAFER_1.1.tar.gz", repos = NULL, type = "source")
require("knitr")
opts_knit$set(root.dir = 'C:\Users\vn1197\OneDrive - University of Bristol\proj_SAFEVAL\safer_1.1\SAFER\excel2R')
library(here)
library(caTools)
library(calibrater)
library(SAFER)
library("XLConnectJars")
library("XLConnect")
library(ggplot2)
knitr::include_graphics("GSA_workflow.png")
modData <- readWorksheet(loadWorkbook("Results_anonym1mod_500.xlsx"), sheet = 1, header = TRUE, colTypes = "numeric")
idxn <- is.na(modData$output)
Y <- modData$output[!idxn]
X1 <- modData$X1[!idxn]
X2 <- modData$X2[!idxn]
X3 <- modData$X3[!idxn]
X4 <- modData$X4[!idxn]
X <- matrix(c(X1,X2,X3,X4), nrow = length(X1), ncol = 4)
x_labels <- c("Freq. trend","Sev. trend","Exposure trend", "Dev. pattern")
N <- length(Y)
n_par <- ncol(X)
colnames(X) <- x_labels
scatter_plots(X, Y, prnam = x_labels) + ylab("Losses (in million £)")  + xlab("Parameter value") + theme(text = element_text(size=15))
colnames(X) <- x_labels
scatter_plots(X, Y, prnam = x_labels) + ylab("Losses (in million £)")  + xlab("Parameter value") + theme(text = element_text(size=15))
install.packages("gdata")
install.packages("xlsx")
ip <- as.data.frame(installed.packages()[,c(1,3:4)])
rownames(ip) <- NULL
ip <- ip[is.na(ip$Priority),1:2,drop=FALSE]
print(ip, row.names=FALSE)
install.packages("mgcv")
install.packages("mgcViz")
install.packages("gam")
install.packages("gamlss")
install.packages("codetools")
ip <- as.data.frame(installed.packages()[,c(1,3:4)])
rownames(ip) <- NULL
ip <- ip[is.na(ip$Priority),1:2,drop=FALSE]
print(ip, row.names=FALSE)
remove.packages("mgcv", lib="C:/Program Files/R/R-3.5.1/library")
setwd("C:/Users/vn1197/OneDrive - University of Bristol/proj_SAFEVAL/safer_1.1/SAFER")
setwd("C:/Users/vn1197/OneDrive - University of Bristol/proj_SAFEVAL/safer_1.1/SAFER/demo")
require("knitr")
opts_knit$set(root.dir = 'C:\Users\vn1197\OneDrive - University of Bristol\proj_SAFEVAL\safer_1.1\SAFER\demo') # Change this before running!
library("knitr", lib.loc="O:/Documents/R/win-library/3.5")
require("knitr")
opts_knit$set(root.dir = 'C:\Users\vn1197\OneDrive - University of Bristol\proj_SAFEVAL\safer_1.1\SAFER\demo') # Change this before running!
require("knitr")
opts_knit$set(root.dir = 'C:/Users/vn1197/OneDrive - University of Bristol/proj_SAFEVAL/safer_1.1/SAFER') # Change this before running!
---
title: Workflow to provide an application example of the effect of changing the space of variability of the input factors with Regional Sensitivity Analysis (RSA)
author: "Valentina Noacco"
date: '`r Sys.Date()`'
output:
html_document: default
pdf_document: default
word_document: default
---
```{r setup, eval=FALSE, include=FALSE}
require("knitr")
opts_knit$set(root.dir = 'C:/Users/vn1197/OneDrive - University of Bristol/proj_SAFEVAL/safer_1.1/SAFER') # Change this before running!
```
<br>
This document provides a workflow which guides through the steps to assess the effect of changing the input factors' space of variability on the input factors' ranking with the GSA method RSA (Regional Sensitivity Analysis).
METHODS
RSA is based on identifying regions in the inputs space corresponding to particular regions (e.g. high or low) of the output.
RSA is applied so that:
the input samples are split into two datasets depending on whether the corresponding output satisfies a threshold condition,
functions: RSA_indices_thres, RSA_plot_thres, RSA_convergence_thres
(see help of 'RSA_indices_thres' for more details and references)
The steps are performed both with the input factors' default ranges and with modified ranges.
MODEL AND STUDY AREA
The model under study is the rainfall-runoff model Hymod (see help of function hymod_sim for more details)
applied to the Leaf catchment in Mississipi, USA (see header of file LeafCatch.txt for more details).
The inputs subject to SA are the 5 model parameters, and the scalar output for SA is (one or multiple) performance metric.
INDEX
Steps:
1. Add paths to required directories
2. Load data and set-up the Hymod model
3. Sample inputs space
4. Run the model against input samples
5. Perform RSA with thresholds
---
title: Workflow to provide an application example of the effect of changing the space of variability of the input factors with Regional Sensitivity Analysis (RSA)
author: "Valentina Noacco"
date: '`r Sys.Date()`'
output:
html_document: default
pdf_document: default
word_document: default
---
```{r setup, eval=FALSE, include=FALSE}
require("knitr")
opts_knit$set(root.dir = 'C:/Users/vn1197/OneDrive - University of Bristol/proj_SAFEVAL/safer_1.1/SAFER') # Change this before running!
```
<br>
This document provides a workflow which guides through the steps to assess the effect of changing the input factors' space of variability on the input factors' ranking with the GSA method RSA (Regional Sensitivity Analysis).
METHODS
RSA is based on identifying regions in the inputs space corresponding to particular regions (e.g. high or low) of the output.
RSA is applied so that:
the input samples are split into two datasets depending on whether the corresponding output satisfies a threshold condition,
functions: RSA_indices_thres, RSA_plot_thres, RSA_convergence_thres
(see help of 'RSA_indices_thres' for more details and references)
The steps are performed both with the input factors' default ranges and with modified ranges.
MODEL AND STUDY AREA
The model under study is the rainfall-runoff model Hymod (see help of function hymod_sim for more details)
applied to the Leaf catchment in Mississipi, USA (see header of file LeafCatch.txt for more details).
The inputs subject to SA are the 5 model parameters, and the scalar output for SA is (one or multiple) performance metric.
INDEX
Steps:
1) Add paths to required directories
2) Load data and set-up the Hymod model
3) Sample inputs space
4) Run the model against input samples
5) Perform RSA with thresholds
library(caTools)
library(calibrater) # Install from tar file, also available at: https://people.maths.bris.ac.uk/~mazjcr/calibrater_0.51.tar.gz
library(SAFER) # Install from zip
library(ggplot2)
data(LeafCatch)
dat <- LeafCatch[1:1095,] # 3 years
# Define inputs:
DistrFun  <- "unif" # Parameter distribution
DistrPar  <- list( c(0, 400), c(0, 2), c(0, 1), c(0, 0.1), c(0.1, 1)) #Parameter ranges (from literature)
x_labels <- c("Sm", "beta", "alfa", "Rs", "Rf")
# Define output:
myfun <- "hymod_MulObj"
SampStrategy <- "lhs" # Here the sampling strategy for All At the Time (AAT) sampling is
# Latin hypercube (another option is random uniform)
N <- 3000 # Sample size
M <- length(DistrPar) # Number of inputs
X <- AAT_sampling(SampStrategy, M, DistrFun, DistrPar, N) # Sample inputs space
colnames(X) <- x_labels # Set columns names
Y <- model_evaluation(myfun, X, dat = dat)
colnames(Y[,1]) <- c("rmse")
colnames(Y[,1]) <- "rmse"
View(Y)
help("colnames")
colnames(Y[1]) <- "rmse"
colnames(Y)[1] <- "rmse"
colnames(Y) <- c("rmse", "bias")
sz_tx <- 12 # Font size for plots
scatter_plots(X, Y[,1], prnam = x_labels) + ylab("rmse")  +
xlab("Input value") + theme(text = element_text(size=sz_tx))
Y <- Y[,1]
ns <- nrow( X )
npr <- ncol( X )
dat <- data.frame(x = as.vector(X),
y = rep(Y, npr),
parnam = factor(rep(prnam, each = ns), levels = prnam))
return(ggplot(data = dat,
mapping = aes(x = x, y = y, parnam = parnam)) +
facet_grid(. ~ parnam) +
geom_point() + ylab("Output") + xlab("Inputs") +
theme_bw())
ggplot(data = dat,
mapping = aes(x = x, y = y, parnam = parnam)) +
facet_grid(. ~ parnam) +
geom_point() + ylab("Output") + xlab("Inputs") +
theme_bw()
Y <- Y[,1]
prnam <- x_labels
ns <- nrow( X )
npr <- ncol( X )
dat <- data.frame(x = as.vector(X),
y = rep(Y, npr),
parnam = factor(rep(prnam, each = ns), levels = prnam))
ggplot(data = dat,
mapping = aes(x = x, y = y, parnam = parnam)) +
facet_grid(. ~ parnam) +
geom_point() + ylab("Output") + xlab("Inputs") +
theme_bw()
ggplot(data = dat,
mapping = aes(x = x, y = y, parnam = parnam)) +
facet_grid(. ~ parnam) +
geom_point() + ylab("Output") + xlab("Inputs") +
theme_bw() + facet_wrap(~variable, scales = "free_x")
ggplot(data = dat,
mapping = aes(x = x, y = y, parnam = parnam)) +
facet_grid(. ~ parnam) +
geom_point() + ylab("Output") + xlab("Inputs") +
theme_bw() + facet_wrap(vars(), scales = "free_x")
ggplot(data = dat,
mapping = aes(x = x, y = y, parnam = parnam)) +
facet_grid(. ~ parnam) +
geom_point() + ylab("Output") + xlab("Inputs") +
theme_bw() + facet_wrap(x, scales = "free_x")
ggplot(data = dat,
mapping = aes(x = x, y = y, parnam = parnam)) +
facet_grid(. ~ parnam) +
geom_point() + ylab("Output") + xlab("Inputs") +
theme_bw() + facet_wrap(X, scales = "free_x")
